{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf380
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green13\blue110;\red170\green13\blue145;}
\margl1440\margr1440\vieww17060\viewh8060\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640

\f0\fs24 \cf0 Richard Warren, author of "Creating iOS 5 Apps," provides the MultiDocument sample code:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 See: {\field{\*\fldinst{HYPERLINK "http://www.freelancemadscience.com/fmslabs_blog/2011/12/19/syncing-multiple-core-data-documents-using-icloud.html"}}{\fldrslt Freelance Mad Science Labs - Blog - Syncing multiple Core Data documents using\'a0iCloud}}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf0 See also Drew McCormack's note: {\field{\*\fldinst{HYPERLINK "http://mentalfaculty.tumblr.com/post/25241910449/under-the-sheets-with-icloud-and-core-data"}}{\fldrslt Under the Sheets with iCloud and Core Data: Troubleshooting}}\
\'93Unfortunately, the most apt conclusion is probably that iCloud syncing of Core Data is not really ready for prime time, at least not for any app with a complex data model. If you have a simple model, and patience, it is doable, even if very few have achieved a shipping app at this point.\'94\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
In an effort to better understand UIManagedDocument and iCloud syncing, I've hacked Rich's sample so that each instance of UIManagedDocument has its own distinct UUID as the value of NSPersistentStoreUbiquitousContentNameKey in its persistentStoreOptions. Also, I simplified the document life-cycle. (See Rich's "Bugs (or features)" section in his link above.) This version of MultiDocument demonstrates iCloud syncing robust enough to provide statistics on the latencies.\
\
I made two discoveries that I want to share:\
\'95 Once your UIManagedDocument is in the cloud, a call to -
\f1\fs22 \cf2 \CocoaLigature0 saveToURL\cf0 :\cf2 forSaveOperation\cf0 :\cf2 completionHandler\cf0 :
\f0\fs24 \CocoaLigature1  can result in a saving error. It seems best to rely on UIManagedDocument's internals to update its persistent store.\
\'95 The iCloud sync mechanism is no ball of fire. Nor trustworthy.\
\
How to use the demo:\
[1] Download the project, add your entitlements, compile.\
[2] Clear out any cloud documents or data associated with the app "multidocument".\
	E.g., in Mac OS X System Preferences->iCloud->Manage\'85->multidocument\
	[Delete All]\
[3] DocumentListTableViewController (the main view controller) creates any new documents (as with Rich's original), but\
[4] When creating a document ( [+] -> 
\f1\fs22 \CocoaLigature0 -(\cf3 IBAction\cf0 )addDocument:(\cf3 id\cf0 )sender ), 
\f0\fs24 \CocoaLigature1 DocumentListTableViewController immediately adds to the document a singleton TextEntry instance. The TextEntry lists the current device's name and model, and the date.\
[5] DocumentListTableViewController opens any documents it creates, and any cloud  documents discovered by the NSMetadataQuery.\
[6] When creating or opening a document, I disable the [+] button until the document opens. (I did this to prevent myself from activating [+] multiple times. The supporting logic expects only one document to be opening or creating at any one time.)\
[7] DocumentListTableViewController LEAVES its documents open, for the app's life cycle on the device\'97a useful simplification, for a test bench app.\
[8] I've expanded the NSDictionary called "record" for each document to include the document itself.\
[9] The segue to the detail view passes the selected row's record to the detail view controller.\
[10] DocumentViewController (the detail view controller) inspects and edits the singleton TextEntry. It updates the TextEntry when editing ends, or when its view disappears.\
[11] I've added a way to log the latencies of cloud updates:\
	(11.a)	Clear out any cloud documents or data associated with the app "multidocument".\
		E.g., in Mac OS X System Preferences->iCloud->Manage\'85->multidocument\
		[Delete All]\
	(11.b) compile and run the app on two devices with iCloud enabled and WiFi available.\
	(11.c)  quit Xcode, disconnect the devices. (I seem to have more trouble running under the debugger.)\
	(11.d) on each device, use the Settings.app, select the "multidocument" app, and enable ping.\
	(11.e)  and set auto lock to "never"\
	(11.f)  launch multidocument.app on both devices; each displays an empty list with a [+] at the top\
	(11.g)  touch the [+] button on one of the devices; [+] disables; TestDoc1 appears (soon) in the list; [+] enables (eventually).\
	(11.h)  the app on the other device discovers TestDoc1 (eventually) and [+] enables\
	(11.i)  on each device, touch the TestDoc1 row; the detail view appears. You see two text fields and a text view. \
		The top field shows the document's name.\
		The next field shows the document's state and TextEntry.modified, the date of the most recent modification.\
		The text view contains the TextEntry.text created above.\
\
		[TestDoc1] \
		[Normal, <date>]\
		<text view>\
	(11.j)  on one device, touch the text in the detail view, and modify it.\
		You might choose to add the word "Start".\
		Dismiss the keyboard.\
		TextEntry.text takes on the text view's new text.\
		TextEntry.modified updates to [NSDate date].\
		With any luck, the state remains "Normal." If not, restart the app.\
	(11.k)  Eventually (25-30 seconds?), the second device detects the change to the cloud document; \
		it logs the latency of the update:the difference between [NSDate date] at detection and TextEntry.modified\
		it updates the second text field and the text view accordingly; and \
		it adds some text automatically to ping the cloud document\
	(11.l)  Eventually (25-30 seconds?), the first device detects and displays the change, then pings the cloud document; iteration ensues.\
	(11.m)  Once it runs, it seems robust. Hours of fun. Kill it.\
	(11.n)  To view the latencies, use Xcode to run the app, set a breakpoint in some DocumentViewController method\
		
\f1\fs22 \CocoaLigature0 > po [self latenciesAsString]
\f0\fs24 \CocoaLigature1 \
\
}